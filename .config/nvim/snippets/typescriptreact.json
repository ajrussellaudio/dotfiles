{
    "component": {
        "prefix": "_c",
        "body": [
            "const ${1:MyComponent} = () => {",
            "\treturn (",
            "\t\t<>",
            "\t\t\tI am the ${1:MyComponent}",
            "\t\t</>",
            "\t)",
            "}",
            "",
            "export default ${1:MyComponent};"
        ]
    },
    "component stories": {
        "prefix": "_cs",
        "body": [
            "import { Meta, StoryObj } from '@storybook/react';",
            "import ${1:MyComponent} from './${1:MyComponent}';",
            "",
            "type Story = StoryObj<typeof ${1:MyComponent}>;",
            "",
            "const meta: Meta<typeof ${1:MyComponent}> = {",
            "\ttitle: '${1:MyComponent}',",
            "\tcomponent: ${1:MyComponent},",
            "\tparameters: {",
            "\t\tdocs: {",
            "\t\t\tdescription: {",
            "\t\t\t\tcomponent: '',",
            "\t\t\t},",
            "\t\t},",
            "\t\tdesign: {",
            "\t\t\ttype: 'figma',",
            "\t\t\turl: '',",
            "\t\t},",
            "\t},",
            "};",
            "",
            "export default meta;",
            "",
            "export const Default: Story = {};"
        ]
    },
    "component_test": {
        "prefix": "_ct",
        "body": [
            "import { render } from '@testing-library/react';",
            "import { ComponentProps } from 'react';",
            "import ${1:MyComponent} from './${1:MyComponent}';",
            "",
            "const render${1:MyComponent} = (props: ComponentProps<typeof ${1:MyComponent}>) =>",
            "\trender(<${1:MyComponent} {...props} />);",
            "",
            "describe('${1:MyComponent}', () => {",
            "\tit('first test', () => {",
            "\t\trender${1:MyComponent}({});",
            "\t});",
            "});"
        ]
    },
    "console.log": {
        "prefix": "_cl",
        "body": "console.log(${1});"
    },
    "useCallback": {
        "prefix": "_ucb",
        "body": [
            "const ${1:memoizedCallback} = useCallback(",
            "\t() => {",
            "\t\t${2}(${3})",
            "\t},",
            "\t[$3]",
            ");"
        ]
    },
    "useContext": {
        "prefix": "_uct",
        "body": "const ${1:value} = useContext(${2:MyContext});"
    },
    "useDebugValue": {
        "prefix": "_ud",
        "body": "useDebugValue(${1:value});"
    },
    "useEffect": {
        "prefix": "_ue",
        "body": [
            "useEffect(() => {",
            "\t${1}",
            "});"
        ]
    },
    "useImperativeHandle": {
        "prefix": "_ui",
        "body": "useImperativeHandle(${1:ref}, ${2:createHandle});"
    },
    "useMemo": {
        "prefix": "_um",
        "body": "const ${1:memoizedCallback} = useMemo(() => ${2}(${3}), [$3]);"
    },
    "useReducer": {
        "prefix": "_urd",
        "body": "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer});"
    },
    "useRef": {
        "prefix": "_urf",
        "body": "const ${1:refContainer} = useRef(${2:initialValue});"
    },
    "useState": {
        "prefix": "_us",
        "body": "const [${1:state}, set${2}] = useState(${3:initialState});"
    }
}
